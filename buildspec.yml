version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 18
  build:
    commands:
      - echo "Packaging Lambda function..."
      - zip -r deployment.zip index.js
      
      # Get current alias version (Production version), handle errors
      - export CURRENT_VERSION=$(aws lambda get-alias --function-name mylambdafunction-1 --name Prod --query "FunctionVersion" --output text || echo "0")
      - echo "Current Lambda Version: $CURRENT_VERSION"
      
      # Deploy the new function version
      - aws lambda update-function-code --function-name mylambdafunction-1 --zip-file fileb://deployment.zip
      
      # Publish new version, handle errors
      - export NEW_VERSION=$(aws lambda publish-version --function-name mylambdafunction-1 --query "Version" --output text || echo "0")
      - echo "New Lambda Version: $NEW_VERSION"

      # Ensure NEW_VERSION is valid
      - if [ "$NEW_VERSION" = "0" ]; then
          echo "Error publishing new version!";
          exit 1;
        fi

      # Test the new function
      - echo "Testing new Lambda version..."
      - if aws lambda invoke --function-name mylambdafunction-1 response.json; then
          echo "Deployment successful!";
          export ROLLBACK=false;
        else
          echo "Deployment failed!";
          export ROLLBACK=true;
        fi

      # Rollback if the test fails
      - if [ "$ROLLBACK" = "true" ]; then
          echo "Rolling back to previous version $CURRENT_VERSION";
          if [ "$CURRENT_VERSION" = "0" ]; then
            echo "No previous version found! Exiting rollback.";
            exit 1;
          fi
          aws lambda update-alias --function-name mylambdafunction-1 --name Prod --function-version $CURRENT_VERSION;
        else
          echo "Updating alias to new version $NEW_VERSION";
          aws lambda update-alias --function-name mylambdafunction-1 --name Prod --function-version $NEW_VERSION;
        fi
artifacts:
  files:
    - deployment.zip
